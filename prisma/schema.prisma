datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model Operator {
  id                            String                          @id @default(uuid())
  firstName                     String
  firstSurname                  String
  secondSurname                 String?
  email                         String                          @unique
  password                      String
  phoneNumber                   String
  consumptionReports            ConsumptionReport[]
  anomaliesReports              AnomaliesReport[]
  monitorizeConsumptionTasks    MonitorizeConsumptionTask[]
  generateConsumptionReportTask GenerateConsumptionReportTask[]
  generateAnomaliesReportTask   GenerateAnomaliesReportTask[]
  maintenanceDeviceTasks        MaintenanceDeviceTask[]
  unusualConsumptionAlerts      UnusualConsumptionAlert[]
  maintenanceAlerts             MaintenanceAlert[]
}

model Supervisor {
  id                            String                          @id @default(uuid())
  firstName                     String
  firstSurname                  String
  secondSurname                 String?
  email                         String                          @unique
  password                      String
  phoneNumber                   String
  consumptionReports            ConsumptionReport[]
  anomaliesReports              AnomaliesReport[]
  monitorizeConsumptionTasks    MonitorizeConsumptionTask[]
  generateConsumptionReportTask GenerateConsumptionReportTask[]
  generateAnomaliesReportTask   GenerateAnomaliesReportTask[]
  maintenanceDeviceTasks        MaintenanceDeviceTask[]
  unusualConsumptionAlerts      UnusualConsumptionAlert[]
  maintenanceAlerts             MaintenanceAlert[]
}

model Device {
  id                            String                          @id @default(uuid())
  name                          String                          @unique
  ratedPower                    Float
  installationDate              DateTime
  lastMaintenance               DateTime?
  observations                  String?
  status                        Status                          @default(value: RUNNING)
  consumptionReports            ConsumptionReport[]
  anomaliesReports              AnomaliesReport[]
  energyConsumptionRecords      EnergyConsumptionRecord[]
  monitorizeConsumptionTasks    MonitorizeConsumptionTask[]
  generateConsumptionReportTask GenerateConsumptionReportTask[]
  generateAnomaliesReportTask   GenerateAnomaliesReportTask[]
  maintenanceDeviceTasks        MaintenanceDeviceTask[]
  unusualConsumptionAlerts      UnusualConsumptionAlert[]
  maintenanceAlerts             MaintenanceAlert[]
}

// Reports.
model ConsumptionReport {
  id                       String                    @id @default(uuid())
  publicId                 String   @unique @default(uuid())
  observations             String?
  startDate                DateTime
  endDate                  DateTime
  title                    String
  energyConsumptionRecords EnergyConsumptionRecord[]
  Operator                 Operator?                 @relation(fields: [operatorId], references: [id])
  operatorId               String?
  Supervisor               Supervisor?               @relation(fields: [supervisorId], references: [id])
  supervisorId             String?
  Device                   Device?                   @relation(fields: [deviceId], references: [id])
  deviceId                 String?
}

model AnomaliesReport {
  id                       String                    @id @default(uuid())
  publicId                 String   @unique @default(uuid())
  observations             String?
  startDate                DateTime
  endDate                  DateTime
  title                    String
  threshold                Float
  energyConsumptionRecords EnergyConsumptionRecord[]
  Operator                 Operator?                 @relation(fields: [operatorId], references: [id])
  operatorId               String?
  Supervisor               Supervisor?               @relation(fields: [supervisorId], references: [id])
  supervisorId             String?
  Device                   Device?                   @relation(fields: [deviceId], references: [id])
  deviceId                 String?
}

// EnergyConsumptionRecord.
model EnergyConsumptionRecord {
  id                  String             @id @default(uuid())
  recordDate          DateTime
  quantity            Float
  price               Float
  Device              Device            @relation(fields: [deviceId], references: [id])
  deviceId            String
  ConsumptionReport   ConsumptionReport? @relation(fields: [consumptionReportId], references: [id])
  consumptionReportId String?
  AnomaliesReport     AnomaliesReport?   @relation(fields: [anomaliesReportId], references: [id])
  anomaliesReportId   String?
}

// Tasks.
model MonitorizeConsumptionTask {
  id           String      @id @default(uuid())
  publicId     String   @unique @default(uuid())
  startDate    DateTime
  endDate      DateTime?
  frequency    Frequency
  threshold    Float
  Device       Device     @relation(fields: [deviceId], references: [id])
  deviceId     String
  Operator     Operator?   @relation(fields: [operatorId], references: [id])
  operatorId   String?
  Supervisor   Supervisor? @relation(fields: [supervisorId], references: [id])
  supervisorId String?
}

model GenerateConsumptionReportTask {
  id              String      @id @default(uuid())
  publicId        String   @unique @default(uuid())
  startDate       DateTime
  endDate         DateTime?
  frequency       Frequency
  startReportDate DateTime
  endReportDate   DateTime
  title           String
  Device          Device     @relation(fields: [deviceId], references: [id])
  deviceId        String
  Operator        Operator?   @relation(fields: [operatorId], references: [id])
  operatorId      String?
  Supervisor      Supervisor? @relation(fields: [supervisorId], references: [id])
  supervisorId    String?
}

model GenerateAnomaliesReportTask {
  id              String      @id @default(uuid())
  publicId        String   @unique @default(uuid())
  startDate       DateTime
  endDate         DateTime?
  frequency       Frequency
  startReportDate DateTime
  endReportDate   DateTime
  title           String
  threshold       Float
  Device          Device     @relation(fields: [deviceId], references: [id])
  deviceId        String
  Operator        Operator?   @relation(fields: [operatorId], references: [id])
  operatorId      String?
  Supervisor      Supervisor? @relation(fields: [supervisorId], references: [id])
  supervisorId    String?
}

model MaintenanceDeviceTask {
  id           String      @id @default(uuid())
  publicId     String   @unique @default(uuid())
  startDate    DateTime
  endDate      DateTime?
  frequency    Frequency
  Device       Device     @relation(fields: [deviceId], references: [id])
  deviceId     String
  Operator     Operator?   @relation(fields: [operatorId], references: [id])
  operatorId   String?
  Supervisor   Supervisor? @relation(fields: [supervisorId], references: [id])
  supervisorId String?
}

// Alerts.
model UnusualConsumptionAlert {
  id           String      @id @default(uuid())
  publicId     String   @unique @default(uuid())
  message      String
  resolved     Boolean     @default(false)
  priority     Priority
  threshold    Float
  Device       Device     @relation(fields: [deviceId], references: [id])
  deviceId     String
  Operator     Operator?   @relation(fields: [operatorId], references: [id])
  operatorId   String?
  Supervisor   Supervisor? @relation(fields: [supervisorId], references: [id])
  supervisorId String?
}

model MaintenanceAlert {
  id           String      @id @default(uuid())
  publicId     String   @unique @default(uuid())
  message      String
  resolved     Boolean     @default(false)
  priority     Priority
  Device       Device     @relation(fields: [deviceId], references: [id])
  deviceId     String
  Operator     Operator?   @relation(fields: [operatorId], references: [id])
  operatorId   String?
  Supervisor   Supervisor? @relation(fields: [supervisorId], references: [id])
  supervisorId String?
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum Status {
  STOPPED
  IDLE
  RUNNING
  PEAK
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}